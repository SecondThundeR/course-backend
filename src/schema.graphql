# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type Conversation {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  creatorId: String!
  id: ID!
  messages: [Message!]!
  participants: [User!]!
  title: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type ConversationConnection {
  edges: [ConversationEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ConversationEdge {
  cursor: String!
  node: Conversation!
}

input ConversationOrder {
  direction: OrderDirection!
}

input CreateConversationInput {
  participantsIds: [String!]!
  title: String
}

input CreateMessageInput {
  content: String!
  conversationId: String!
  type: MessageType = REGULAR
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Message {
  content: String!
  contentHistory: [String!]!
  conversation: Conversation

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  from: User
  id: ID!
  type: MessageType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MessageConnection {
  edges: [MessageEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

input MessageOrder {
  direction: OrderDirection!
}

"""Type of message"""
enum MessageType {
  LATEX
  REGULAR
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createConversation(data: CreateConversationInput!): Conversation!
  createMessage(data: CreateMessageInput!): Message!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  conversation(conversationId: String!): Conversation!
  conversations(after: String, before: String, first: Int, last: Int, orderBy: ConversationOrder, query: String, skip: Int): ConversationConnection!
  currentUser: User!
  message(messageId: String!): Message!
  messages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrder, query: String, skip: Int): MessageConnection!
  userConversations(userId: String!): [Conversation!]!
  userMessages(userId: String!): [Message!]!
}

input SignupInput {
  email: String!
  firstname: String!
  lastname: String
  password: String!
}

type Subscription {
  conversationCreated: Conversation!
  messageCreated: Message!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  conversations: [Conversation!]!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  messages: [Message!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}